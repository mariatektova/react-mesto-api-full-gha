{"ast":null,"code":"export const BASE_URL = 'https://api.mariatektova.students.nomoredomains.rocks';\nconst checkResponse = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Error: ${res.status}`);\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => checkResponse(res));\n};\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/sign-up`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/sign-in`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n};","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","checkToken","token","fetch","method","headers","Accept","Authorization","then","register","email","password","body","JSON","stringify","authorize"],"sources":["/Users/mariatektova/Documents/верстка/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://api.mariatektova.students.nomoredomains.rocks';\nconst checkResponse = (res) => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Error: ${res.status}`);\n};\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((res) => checkResponse(res));\n};\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/sign-up`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  }).then((res) => checkResponse(res));\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/sign-in`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  }).then((res) => checkResponse(res));\n};\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uDAAuD;AAC/E,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC7B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;AAC/C,CAAC;AACD,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOC,KAAK,CAAE,GAAEV,QAAS,WAAU,EAAE;IACnCW,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASL,KAAM;IACjC;EACF,CAAC,CAAC,CAACM,IAAI,CAAEb,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMc,QAAQ,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOR,KAAK,CAAE,GAAEV,QAAS,UAAS,EAAE;IAClCW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACH,IAAI,CAAEb,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMoB,SAAS,GAAG,CAACL,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOR,KAAK,CAAE,GAAEV,QAAS,UAAS,EAAE;IAClCW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACH,IAAI,CAAEb,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC;AACtC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}